{"version":3,"sources":["styledComponents.tsx","ShowQuote.tsx","Quote.tsx","helpers.ts","Footer.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Main","styled","main","BlockQuote","blockquote","Button","button","H1","h1","ShowQuote","quote","Fragment","content","author","Quote","useState","setQuote","loading","setLoading","toolTip","setToolTip","text","useRef","useEffect","a","fetch","res","json","current","console","log","setTimeout","getQuote","className","type","color","height","width","id","title","href","target","rel","icon","faTwitter","onClick","val","navigator","clipboard","writeText","dummy","document","createElement","body","appendChild","setAttribute","select","execCommand","removeChild","copyText","Footer","data-testid","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"irCAEO,IAAMA,EAAOC,IAAOC,KAAV,KAQJC,EAAaF,IAAOG,WAAV,KAOVC,EAASJ,IAAOK,OAAV,KAeNC,EAAKN,IAAOO,GAAV,KCXAC,EAToB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACrC,OACO,kBAAC,IAAMC,SAAP,KACI,kBAACR,EAAD,gBAAcO,QAAd,IAAcA,OAAd,EAAcA,EAAOE,QAArB,KACA,qCAAOF,QAAP,IAAOA,OAAP,EAAOA,EAAOG,U,gBCgEXC,EAhES,WAAO,IAAD,EACFC,mBAA2B,MADzB,mBACrBL,EADqB,KACdM,EADc,OAEED,oBAAS,GAFX,mBAErBE,EAFqB,KAEZC,EAFY,OAGEH,mBAAS,QAHX,mBAGrBI,EAHqB,KAGZC,EAHY,KAItBC,EAAOC,iBAAO,IAEpBC,qBAAU,WAeHb,GAdS,uCAAG,kCAAAc,EAAA,sEAEbN,GAAW,GAFE,SAGKO,MAjBV,wCAcK,cAGPC,EAHO,gBAIsBA,EAAIC,OAJ1B,gBAIkC,GAAvCf,EAJK,EAILA,QAASC,EAJJ,EAIIA,OACjBG,EAAS,CAAEJ,UAASC,WACpBQ,EAAKO,QAAL,WAAmBhB,EAAnB,cAAgCC,GANnB,kDAQbgB,QAAQC,IAAR,MACAd,EAAS,MATI,yBAWbe,YAAW,kBAAMb,GAAW,KAAQ,KAXvB,6EAAH,oDAcFc,KACX,CAACtB,IAaJ,OACE,yBAAKuB,UAAU,SACb,kBAACjC,EAAD,CAAMiC,UAAU,cACbhB,EACC,kBAAC,IAAD,CAAQiB,KAAK,YAAYC,MAAM,UAAUC,OAAQ,GAAIC,MAAO,KAE5D,kBAAC,EAAD,CAAW3B,MAAOA,KAGtB,6BAASuB,UAAU,iBACjB,kBAAC5B,EAAD,KACE,uBACEiC,GAAG,cACHC,MAAM,kBACNC,KAAI,gDAA2CnB,EAAKO,SACpDa,OAAO,SACPC,IAAI,sBACJT,UAAU,gBAEV,kBAAC,IAAD,CAAiBU,KAAMC,QAG3B,kBAACvC,EAAD,CAAQwC,QA5BK,YC7CG,SAACC,GAAiB,IAAD,IACvC,aAAIC,iBAAJ,iBAAI,EAAWC,iBAAf,aAAI,EAAsBC,UAAW,OAAOF,UAAUC,UAAUC,UAAUH,GAE1E,IAAMI,EAAQC,SAASC,cAAc,SACrCD,SAASE,KAAKC,YAAYJ,GAC1BA,EAAMK,aAAa,QAAST,GAC5BI,EAAMM,SACNL,SAASM,YAAY,QACrBN,SAASE,KAAKK,YAAYR,GDsCxBS,CAAStC,EAAKO,SACdR,EAAW,WACXW,YAAW,kBAAMX,EAAW,UAAS,QAyBHD,GAC9B,kBAACd,EAAD,CAAQwC,QAlCM,WAClB7B,EAAS,MACTE,GAAW,KAgCP,gBE5DO0C,EAZA,WACd,OACC,4BAAQ3B,UAAU,UACjB,2BACC,uBAAG4B,cAAY,SAASrB,KAAK,+BAA+BC,OAAO,SAASC,IAAI,uBAAhF,0BCUWoB,EAVO,WACrB,OACC,yBAAK7B,UAAU,OACd,kBAAC1B,EAAD,iBACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCiBwD,QACU,cAA7BC,OAAOC,SAASC,UAEc,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXjCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnB,SAASoB,eAAe,SDkHrB,kBAAmBxB,WACtBA,UAAUyB,cAAcC,MACtBC,MAAK,SAACC,GACNA,EAAaC,gBAEbC,OAAM,SAACC,GACPjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.c9f61671.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Main = styled.main`\n\tpadding: 3rem;\n\twidth: 100%;\n\tborder-radius: 6px;\n\topacity: 0.7;\n\tbackground: whitesmoke;\n`;\n\nexport const BlockQuote = styled.blockquote`\n\ttext-align: center;\n\tfont-size: 1.25rem;\n\tcolor: darkslategray;\n\tdisplay: block;\n`;\n\nexport const Button = styled.button`\n\tdisplay: inline-block;\n\tcursor: pointer;\n\tmargin: 0.25rem 0.5rem;\n\tpadding: 0.25rem 0.75rem;\n\tbackground-color: black;\n\tborder-color: white;\n\tcolor: white;\n\tfont-size: 1.25rem;\n\tfont-family: copperplate;\n\tborder-radius: 4px;\n\ttext-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);\n\tbox-shadow: 1px 1px rgba(0, 0, 0, 0.2);\n`;\n\nexport const H1 = styled.h1`\n\tmargin: 0.75rem auto 0;\n\tcolor: white;\n\tfont-size: 3rem;\n`;\n","import React from 'react';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport { BlockQuote } from './styledComponents';\n\ninterface QuoteData {\n\tcontent: string;\n\tauthor: string;\n}\ntype Props = {\n\tquote: QuoteData | null;\n};\n\nconst ShowQuote: React.FC<Props> = ({ quote }) => {\n\treturn (\n        <React.Fragment>\n            <BlockQuote>\"{quote?.content}\"</BlockQuote>\n            <cite>{quote?.author}</cite>\n        </React.Fragment>\n\t);\n};\n\nexport default ShowQuote;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport Loader from \"react-loader-spinner\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport { Button, Main } from \"./styledComponents\";\nimport ShowQuote from \"./ShowQuote\";\nimport { copyText } from \"./helpers\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\n\nconst API_URL = \"http://api.quotable.io/quotes/random\";\n\ninterface QuoteData {\n  content: string;\n  author: string;\n}\n\nconst Quote: React.FC = () => {\n  const [quote, setQuote] = useState<QuoteData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [toolTip, setToolTip] = useState(\"Copy\");\n  const text = useRef(\"\");\n\n  useEffect(() => {\n    const getQuote = async () => {\n      try {\n        setLoading(true);\n        const res = await fetch(API_URL);\n        const { content, author } = (await res.json())[0];\n        setQuote({ content, author });\n        text.current = `\"${content}\" -${author}`;\n      } catch (e) {\n        console.log(e);\n        setQuote(null);\n      } finally {\n        setTimeout(() => setLoading(false), 500);\n      }\n    };\n    if (!quote) getQuote();\n  }, [quote]);\n\n  const getNewQuote = () => {\n    setQuote(null);\n    setLoading(true);\n  };\n\n  const handleCopy = () => {\n    copyText(text.current);\n    setToolTip(\"Copied!\");\n    setTimeout(() => setToolTip(\"Copy\"), 1500);\n  };\n\n  return (\n    <div className=\"Quote\">\n      <Main className=\"Quote-Main\">\n        {loading ? (\n          <Loader type=\"ThreeDots\" color=\"#00BFFF\" height={80} width={80} />\n        ) : (\n          <ShowQuote quote={quote} />\n        )}\n      </Main>\n      <section className=\"Quote-Buttons\">\n        <Button>\n          <a\n            id=\"tweet-quote\"\n            title=\"tweet this code\"\n            href={`https://twitter.com/intent/tweet?text=${text.current}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"Tweet-Button\"\n          >\n            <FontAwesomeIcon icon={faTwitter} />\n          </a>\n        </Button>\n        <Button onClick={handleCopy}>{toolTip}</Button>\n        <Button onClick={getNewQuote}>New Quote</Button>\n      </section>\n    </div>\n  );\n};\n\nexport default Quote;\n","export const copyText = (val: string) => {\n  if (navigator?.clipboard?.writeText) return navigator.clipboard.writeText(val);\n\n  const dummy = document.createElement('input');\n  document.body.appendChild(dummy);\n  dummy.setAttribute('value', val);\n  dummy.select();\n  document.execCommand('copy');\n  document.body.removeChild(dummy);\n};\n\n","import React from 'react';\n\nconst Footer = () => {\n\treturn (\n\t\t<footer className=\"Footer\">\n\t\t\t<p>\n\t\t\t\t<a data-testid=\"footer\" href=\"https://github.com/druserkes\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\tDru Serkes &copy;2020\n\t\t\t\t</a>\n\t\t\t</p>\n\t\t</footer>\n\t);\n};\n\nexport default Footer;\n","import React from 'react';\nimport './App.css';\nimport Quote from './Quote';\nimport Footer from './Footer';\nimport { H1 } from './styledComponents';\n\nconst App: React.FC = () => {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<H1>Quote Me</H1>\n\t\t\t<Quote />\n\t\t\t<Footer />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders : { 'Service-Worker': 'script' }\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}